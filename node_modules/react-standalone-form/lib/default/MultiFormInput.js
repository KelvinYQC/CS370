"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _ = require("../.");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MultiFormInput = /*#__PURE__*/function (_React$Component) {
  _inherits(MultiFormInput, _React$Component);

  var _super = _createSuper(MultiFormInput);

  function MultiFormInput() {
    var _this;

    _classCallCheck(this, MultiFormInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      value: _this.props.value,
      cachedValue: null
    });

    return _this;
  }

  _createClass(MultiFormInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!this.props.value || !this.props.value.length) {
        this.setState({
          value: [{}]
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      var _this2 = this;

      var _this$props = this.props,
          setValue = _this$props.setValue,
          name = _this$props.name,
          required = _this$props.required;
      var _this$state = this.state,
          value = _this$state.value,
          cachedValue = _this$state.cachedValue; // Bind component state to Form's field state.

      if (prevState.value !== value) {
        setValue(name, value, required);
      } // Apply initial Value.


      if (!prevProps.value && this.props.value) {
        this.setState(function (prevState) {
          return {
            value: _this2.props.value,
            cachedValue: _this2.props.value
          };
        });
      } // To prevent unwanted behaviors after deleting an item, force rerender by
      // emptying value, then loading it up again.


      if (prevState.value && prevState.value.length > value.length && value.length) {
        this.setState(function (prevState) {
          return {
            value: [],
            cachedValue: value
          };
        });
      }

      if (cachedValue) {
        this.setState(function (prevState) {
          return {
            value: cachedValue,
            cachedValue: null
          };
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props2 = this.props,
          FormComponentProp = _this$props2.form,
          formProps = _this$props2.formProps,
          MoreComponentProp = _this$props2.moreComponent,
          moreLabel = _this$props2.moreLabel,
          moreComponentProps = _this$props2.moreComponentProps,
          deleteIcon = _this$props2.deleteIcon,
          classes = _this$props2.classes;
      var _this$state2 = this.state,
          value = _this$state2.value,
          cachedValue = _this$state2.cachedValue;
      return /*#__PURE__*/_react.default.createElement("div", null, value && value.length && !cachedValue ? value.map(function (fields, index) {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: classes.multiFormInput,
          key: index
        }, /*#__PURE__*/_react.default.createElement(FormComponentProp, _extends({
          fields: Object.keys(fields).length ? fields : [],
          onChange: function onChange(updatedFields) {
            return _this3.setState(function (prevState) {
              return {
                value: prevState.value.map(function (item, subIndex) {
                  return index !== subIndex ? item : updatedFields;
                })
              };
            });
          },
          value: value
        }, formProps)), /*#__PURE__*/_react.default.createElement("button", {
          className: classes.delete,
          onClick: function onClick() {
            return _this3.setState(function (prevState) {
              return {
                value: prevState.value.filter(function (item, prevIndex) {
                  return prevIndex !== index;
                })
              };
            });
          },
          title: "Delete"
        }, deleteIcon));
      }) : null, /*#__PURE__*/_react.default.createElement(MoreComponentProp, _extends({
        onClick: function onClick() {
          return _this3.setState(function (prevState) {
            return {
              value: [].concat(_toConsumableArray(prevState.value), [{}])
            };
          });
        }
      }, moreComponentProps), moreLabel));
    }
  }]);

  return MultiFormInput;
}(_react.default.Component);

MultiFormInput.propTypes = {
  value: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string]),
  form: _propTypes.default.elementType,
  formProps: _propTypes.default.object,
  moreLabel: _propTypes.default.string,
  moreComponent: _propTypes.default.elementType,
  moreComponentProps: _propTypes.default.object,
  deleteIcon: _propTypes.default.node
};
MultiFormInput.defaultProps = {
  moreLabel: 'Add more',
  moreComponent: _.DefaultButton,
  deleteIcon: 'X'
};

var _default = (0, _.withFormControl)((0, _reactJss.default)(function (theme) {
  var _delete;

  return {
    multiFormInput: {
      display: 'flex',
      '& + &': {
        marginTop: theme.sizes.inputGutterBottom
      },
      '& > *:first-child': {
        flexGrow: 1
      }
    },
    delete: (_delete = {
      backgroundImage: 'none',
      backgroundColor: theme.colors.inputBorder,
      // lighen
      color: 'white',
      fontSize: theme.typography.inputFontSize,
      padding: 5,
      marginLeft: 15,
      border: 'none',
      borderTopRightRadius: theme.sizes.borderRadius,
      borderBottomRightRadius: theme.sizes.borderRadius,
      cursor: 'pointer'
    }, _defineProperty(_delete, (0, _.breakpoint)(theme.breakpoints.sm), {
      marginLeft: 30
    }), _defineProperty(_delete, '&:hover', {
      backgroundColor: theme.colors.inputBorder
    }), _delete)
  };
})(MultiFormInput));

exports.default = _default;