"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ = require("../.");

var _excluded = ["name", "type", "value", "placeholder", "min", "accept", "required", "setValue"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Input = function Input(_ref) {
  var name = _ref.name,
      type = _ref.type,
      value = _ref.value,
      placeholder = _ref.placeholder,
      min = _ref.min,
      accept = _ref.accept,
      required = _ref.required,
      setValue = _ref.setValue,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/_react.default.createElement("input", _extends({
    className: "form-input",
    name: name,
    type: type === 'password-novalidation' ? 'password' : type // This allows to add a custom validation rule for password field, while still
    // being able to skip the check where it is not neccessary, eg. on login forms.
    ,
    placeholder: placeholder,
    onChange: function onChange(e) {
      if (type === 'file') {
        var fileReader = new FileReader();
        var _e$target$files$ = e.target.files[0],
            fileName = _e$target$files$.name,
            fileType = _e$target$files$.type;
        var dataFile = e.target.files[0];
        fileReader.readAsDataURL(e.target.files[0]);

        fileReader.onload = function () {
          var data = fileReader.result;
          setValue(name, {
            name: fileName,
            type: fileType.split('/')[0],
            data: data,
            dataFile: dataFile
          }, required);
        };
      } else {
        setValue(name, e.target.value, required, {
          type: type,
          min: min
        });
      }
    },
    accept: accept,
    value: type !== 'file' ? value : undefined
  }, otherProps));
};

Input.defaultProps = {
  type: 'text'
};
Input.propTypes = {
  name: _propTypes.default.string.isRequired,
  type: _propTypes.default.string,
  value: _propTypes.default.any,
  placeholder: _propTypes.default.node,
  min: _propTypes.default.number,
  required: _propTypes.default.bool,
  setValue: _propTypes.default.func.isRequired
};

var _default = (0, _.withFormControl)(Input);

exports.default = _default;