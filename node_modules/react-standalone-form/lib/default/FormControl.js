"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _classnames = _interopRequireDefault(require("classnames"));

var _polished = require("polished");

var _2 = require("../.");

var _excluded = ["name", "label", "initialValue", "type", "help", "className", "addon", "narrow", "large", "inlineLabel", "inline", "noBottomGutter", "disabled", "classes"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var withFormControl = function withFormControl(InputComponent) {
  var FormControl = function FormControl(_ref) {
    var name = _ref.name,
        label = _ref.label,
        initialValue = _ref.initialValue,
        type = _ref.type,
        help = _ref.help,
        className = _ref.className,
        addon = _ref.addon,
        narrow = _ref.narrow,
        large = _ref.large,
        inlineLabel = _ref.inlineLabel,
        inline = _ref.inline,
        noBottomGutter = _ref.noBottomGutter,
        disabled = _ref.disabled,
        classes = _ref.classes,
        otherProps = _objectWithoutProperties(_ref, _excluded);

    return /*#__PURE__*/_react.default.createElement(_2.FormConsumer, null, function (_ref2) {
      var _classNames;

      var fieldsData = _ref2.fieldsData,
          setValue = _ref2.setValue;
      if (!fieldsData[name]) return null;
      var _fieldsData$name = fieldsData[name],
          value = _fieldsData$name.value,
          validation = _fieldsData$name.validation,
          required = _fieldsData$name.required,
          fieldsDataHelp = _fieldsData$name.help;
      var logicProps = {
        name: name,
        initialValue: initialValue,
        required: required,
        type: type,
        setValue: setValue
      };

      var inputProps = _objectSpread({
        name: name,
        value: (value !== null ? value : initialValue) || '',
        required: required,
        type: type,
        setValue: setValue
      }, otherProps);

      return /*#__PURE__*/_react.default.createElement(_2.FormControlLogic, logicProps, /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(classes.formControl, 'form-control', (_classNames = {}, _defineProperty(_classNames, classes.inlineLabel, inlineLabel), _defineProperty(_classNames, classes.inline, inline), _defineProperty(_classNames, classes.narrow, narrow), _defineProperty(_classNames, classes.large, large), _defineProperty(_classNames, classes.noBottomGutter, noBottomGutter), _defineProperty(_classNames, classes[validation], validation), _defineProperty(_classNames, classes.disabled, disabled), _defineProperty(_classNames, className, className), _classNames))
      }, label ? InputComponent.displayName && ['Checkbox', 'Checkboxes', 'Radio', 'Switch'].find(function (item) {
        return InputComponent.displayName.includes(item);
      }) ? /*#__PURE__*/_react.default.createElement("span", {
        className: classes.label
      }, label) : /*#__PURE__*/_react.default.createElement("label", {
        className: classes.label,
        htmlFor: name
      }, label) : null, /*#__PURE__*/_react.default.createElement(InputComponent, inputProps), addon && /*#__PURE__*/_react.default.createElement("div", {
        className: classes.addon
      }, addon), (fieldsDataHelp || help) && /*#__PURE__*/_react.default.createElement("span", {
        className: classes.help
      }, fieldsDataHelp || help)));
    });
  };

  return (0, _reactJss.default)(function (theme) {
    var _$label, _inlineLabel;

    return {
      formControl: _objectSpread(_objectSpread({
        margin: 0,
        marginBottom: theme.sizes.inputGutterBottom,
        position: 'relative',
        width: theme.sizes.inputWidth,
        overflow: 'visible',
        boxSizing: 'border-box',
        maxWidth: '100%',
        textAlign: 'left'
      }, (0, _2.inputHeight)(theme.sizes.inputHeight)), {}, {
        '& .form-input': _objectSpread(_objectSpread({
          width: '100%',
          margin: 0,
          borderStyle: 'solid',
          borderColor: theme.colors.inputBorder,
          borderRadius: theme.sizes.borderRadius,
          borderWidth: theme.sizes.onlyBottomBorder ? 0 : theme.sizes.borderWidth
        }, theme.sizes.onlyBottomBorder ? {
          borderBottomWidth: theme.sizes.borderWidth
        } : {}), {}, {
          boxSizing: 'border-box',
          fontSize: theme.typography.inputFontSize,
          fontWeight: theme.typography.inputFontWeight,
          transition: 'all 200ms ease-in',
          backgroundColor: theme.colors.inputBg,
          paddingLeft: theme.sizes.inputSidePaddings,
          paddingRight: theme.sizes.inputSidePaddings,
          color: theme.colors.inputText,
          '-webkit-appearance': 'none'
        }, (0, _2.placeholder)({
          color: theme.colors.placeholder
        })),
        '& .form-input[type=number]': {
          '-moz-appearance': 'textfield',
          appearance: 'textfield',
          '&::-webkit-inner-spin-button': {
            '-webkit-appearance': 'none'
          }
        },
        '& textarea ~ $addon': {
          top: 0,
          bottom: 'auto'
        },
        '& $label ~ textarea ~ $addon': {
          top: Math.floor(theme.typography.labelFontSize * 1.4 + theme.sizes.labelGutterBottom)
        },
        // States
        '& .form-input:focus': {
          borderColor: theme.colors.accent,
          boxShadow: theme.colors.inputFocusShadow,
          outlineWidth: 0,
          outline: 'none'
        }
      }),
      disabled: {
        opacity: 0.5,
        cursor: 'not-allowed',
        '& .form-input, & .form-checkitem': {
          pointerEvents: 'none'
        }
      },
      success: {
        '& $label, & $addon, & $help': {
          color: theme.colors.success
        },
        '& .form-input:not(:focus)': {
          borderColor: theme.colors.success
        }
      },
      error: {
        '& $label, & $addon, & $help, & .form-checkitem': {
          color: theme.colors.error
        },
        '& .form-input:not(:focus)': {
          borderColor: theme.colors.error,
          backgroundColor: (0, _polished.lighten)(0.54, theme.colors.error)
        }
      },
      label: {
        display: 'block',
        margin: 0,
        marginBottom: theme.sizes.labelGutterBottom,
        fontSize: theme.typography.labelFontSize,
        lineHeight: 'normal',
        textTransform: 'none',
        textAlign: 'left',
        fontWeight: theme.typography.labelFontWeight,
        color: theme.colors.label
      },
      help: {
        position: 'absolute',
        top: '100%',
        display: 'block',
        margin: 0,
        fontSize: theme.typography.helpFontSize,
        lineHeight: 'normal',
        color: theme.colors.inputText
      },
      addon: {
        position: 'absolute',
        bottom: 0,
        right: !theme.sizes.moveAddonToLeft ? theme.sizes.addonSpacing : 'auto',
        left: theme.sizes.moveAddonToLeft ? theme.sizes.addonSpacing : 'auto'
      },
      // Modifiers
      large: _objectSpread(_objectSpread({}, (0, _2.inputHeight)(theme.sizes.inputHeight + 4)), {}, {
        '& $label': {
          marginBottom: 2
        },
        '& + &': {
          marginTop: -theme.sizes.inputGutterBottom + 14
        },
        '& $label ~ textarea ~ $addon': {
          top: Math.floor(theme.typography.labelFontSize * 1.4 + 2)
        }
      }),
      inlineLabel: (_inlineLabel = {}, _defineProperty(_inlineLabel, (0, _2.breakpoint)(theme.breakpoints.sm), {
        display: 'flex',
        width: '100%'
      }), _defineProperty(_inlineLabel, '& $label', (_$label = {}, _defineProperty(_$label, (0, _2.breakpoint)(theme.breakpoints.sm), {
        marginBottom: 0,
        marginRight: 10,
        minWidth: theme.sizes.inlineLabelWidth,
        maxWidth: theme.sizes.inlineLabelWidth,
        whiteSpace: 'nowrap'
      }), _defineProperty(_$label, '& + *', _defineProperty({}, (0, _2.breakpoint)(theme.breakpoints.sm), {
        flexGrow: 1
      })), _$label)), _defineProperty(_inlineLabel, '& $help', _defineProperty({}, (0, _2.breakpoint)(theme.breakpoints.sm), {
        left: theme.sizes.inlineLabelWidth + 10
      })), _defineProperty(_inlineLabel, '& $label ~ textarea ~ $addon', _defineProperty({}, (0, _2.breakpoint)(theme.breakpoints.sm), {
        top: 0
      })), _inlineLabel),
      inline: {
        width: '100%',
        '& .form-checkitem': {
          display: 'inline-block',
          whiteSpace: 'nowrap',
          marginRight: 20,
          '&:last-of-type': {
            marginLeft: 0
          }
        }
      },
      narrow: _defineProperty({}, (0, _2.breakpoint)(theme.breakpoints.sm), {
        maxWidth: theme.sizes.narrowInputWidth
      }),
      noBottomGutter: {
        marginBottom: 0
      }
    };
  })(FormControl);
};

withFormControl.propTypes = {
  name: _propTypes.default.string.isRequired,
  label: _propTypes.default.node,
  className: _propTypes.default.string,
  addon: _propTypes.default.node,
  help: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  validation: _propTypes.default.oneOf(['success', 'error']),
  inlineLabel: _propTypes.default.bool,
  inline: _propTypes.default.bool,
  narrow: _propTypes.default.bool,
  large: _propTypes.default.bool,
  noBottomGutter: _propTypes.default.bool,
  initialValue: _propTypes.default.any,
  required: _propTypes.default.bool,
  setValue: _propTypes.default.func.isRequired,
  children: _propTypes.default.node.isRequired
};
var _default = withFormControl;
exports.default = _default;