"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _classnames = _interopRequireDefault(require("classnames"));

var _polished = require("polished");

var _ = require("../.");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var MultiImageUpload = function MultiImageUpload(_ref) {
  var name = _ref.name,
      value = _ref.value,
      required = _ref.required,
      setValue = _ref.setValue,
      classes = _ref.classes;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, value && value.map(function (item, index) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes.item,
      key: index
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: classes.imageWrapper
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: item.data || item,
      className: classes.image,
      alt: "Uploaded file ".concat(index)
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: classes.delete,
      onClick: function onClick() {
        return setValue(name, value.filter(function (subItem, subIndex) {
          return subIndex !== index;
        }), required);
      }
    }, "x")));
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.item
  }, /*#__PURE__*/_react.default.createElement("input", {
    accept: "image/*",
    className: classes.input,
    id: name,
    multiple: true,
    type: "file",
    onChange: function onChange(e) {
      var oldValue = value || [];
      Object.values(e.target.files).forEach(function (value) {
        var fileReader = new FileReader();
        var fileName = value.name,
            fileType = value.type;
        var dataFile = value;
        fileReader.readAsDataURL(value);

        fileReader.onload = function () {
          var data = fileReader.result;
          setValue(name, [].concat(_toConsumableArray(oldValue), [{
            fileName: fileName,
            type: fileType.split('/')[0],
            data: data,
            dataFile: dataFile
          }]), required);
          oldValue = [].concat(_toConsumableArray(oldValue), [{
            fileName: fileName,
            type: fileType.split('/')[0],
            data: data,
            dataFile: dataFile
          }]);
        };
      });
    }
  }), /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: name,
    className: (0, _classnames.default)(classes.imageWrapper, classes.label)
  }, "Add more")));
};

MultiImageUpload.defaultProps = {
  columns: 4
};

var _default = (0, _.withFormControl)((0, _reactJss.default)(function (theme) {
  var _imageWrapper;

  return {
    root: {
      display: 'flex',
      flexWrap: 'wrap',
      margin: -10
    },
    item: _defineProperty({
      maxWidth: '50%',
      minWidth: '50%',
      padding: 10,
      boxSizing: 'border-box'
    }, (0, _.breakpoint)(theme.breakpoints.md), {
      maxWidth: function maxWidth(props) {
        return "".concat(100 / props.columns, "%");
      },
      minWidth: function minWidth(props) {
        return "".concat(100 / props.columns, "%");
      }
    }),
    imageWrapper: (_imageWrapper = {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: theme.colors.fill,
      padding: 15,
      height: '33vw',
      position: 'relative'
    }, _defineProperty(_imageWrapper, (0, _.breakpoint)(theme.breakpoints.md), {
      height: '20vw'
    }), _defineProperty(_imageWrapper, (0, _.breakpoint)(theme.breakpoints.lg), {
      height: '12vw',
      maxHeight: 300
    }), _imageWrapper),
    image: {
      maxWidth: '100%',
      maxHeight: '100%'
    },
    delete: {
      position: 'absolute',
      top: 0,
      right: 0,
      lineHeight: 'normal',
      fontSize: 16,
      padding: 5,
      cursor: 'pointer',
      '&:hover': {
        color: theme.colors.inputBorder
      }
    },
    input: {
      display: 'none'
    },
    label: {
      display: 'flex',
      flexDrection: 'column',
      cursor: 'pointer',
      alignItems: 'center',
      justifyContent: 'center',
      color: theme.colors.inputText,
      '&:hover': {
        backgroundColor: (0, _polished.lighten)(0.04, theme.colors.fill)
      }
    }
  };
})(MultiImageUpload));

exports.default = _default;