"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ = require("../.");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MultiSelect = /*#__PURE__*/function (_React$Component) {
  _inherits(MultiSelect, _React$Component);

  var _super = _createSuper(MultiSelect);

  function MultiSelect() {
    var _this;

    _classCallCheck(this, MultiSelect);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      isOpen: false
    });

    return _this;
  }

  _createClass(MultiSelect, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          name = _this$props.name,
          value = _this$props.value,
          placeholder = _this$props.placeholder,
          required = _this$props.required,
          setValue = _this$props.setValue,
          options = _this$props.options,
          classes = _this$props.classes;
      var isOpen = this.state.isOpen;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(classes.select, classes.multiSelect, 'form-input form-select'),
        onClick: function onClick() {
          return !isOpen && _this2.setState({
            isOpen: true
          });
        }
      }, value && value.length && options && options.length ? /*#__PURE__*/_react.default.createElement("div", {
        className: classes.values
      }, value.map(function (item, index) {
        var selectedOption = options.find(function (option) {
          return option.value === item;
        });
        return /*#__PURE__*/_react.default.createElement("span", {
          key: index,
          className: classes.value
        }, typeof selectedOption === 'string' ? item : selectedOption.label);
      })) : placeholder || (required ? 'Select' : 'All'), isOpen && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: classes.overlay,
        onClick: function onClick() {
          return _this2.setState({
            isOpen: false
          });
        }
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: classes.options
      }, options.map(function (option, index) {
        var optionLabel = typeof option === 'string' ? option : option.label;
        var optionValue = typeof option === 'string' ? option : option.value;
        var checked = value && value.includes(optionValue);
        return /*#__PURE__*/_react.default.createElement("div", {
          key: index,
          className: (0, _classnames.default)(classes.option, _defineProperty({}, classes.isChecked, checked)),
          onClick: function onClick() {
            return setValue(name, (0, _.checkboxHandler)(!checked, optionValue, value), required);
          }
        }, optionLabel, checked && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
          className: classes.check
        }, "\u2713"), /*#__PURE__*/_react.default.createElement("span", {
          className: classes.close
        }, "\u2717")));
      }))));
    }
  }]);

  return MultiSelect;
}(_react.default.Component);

MultiSelect.propTypes = {
  name: _propTypes.default.string.isRequired,
  value: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string]),
  placeholder: _propTypes.default.node,
  required: _propTypes.default.bool,
  setValue: _propTypes.default.func.isRequired,
  options: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
    label: _propTypes.default.string,
    value: _propTypes.default.string
  })]))
};

var _default = (0, _.withFormControl)((0, _reactJss.default)(function (theme) {
  return _objectSpread(_objectSpread({}, (0, _.selectTheme)(theme)), {}, {
    multiSelect: {
      position: 'relative',
      height: 'auto !important'
    },
    values: {
      margin: -3
    },
    value: {
      padding: '0 5px',
      backgroundColor: theme.colors.fill,
      borderRadius: 3,
      whiteSpace: 'nowrap',
      display: 'inline-block',
      margin: 3
    },
    options: {
      position: 'absolute',
      top: '100%',
      left: -1,
      right: -2,
      height: theme.sizes.inputHeight * 5,
      border: "1px solid ".concat(theme.colors.inputBorder),
      backgroundColor: 'white',
      zIndex: 101,
      overflowY: 'scroll'
    },
    option: {
      padding: '3px 5px',
      marginBottom: 1,
      cursor: 'pointer',
      display: 'flex',
      justifyContent: 'space-between',
      '&:hover': {
        backgroundColor: 'rgba(0,0,0,0.04)'
      }
    },
    isChecked: {
      backgroundColor: 'rgba(0,0,0,0.12)',
      '&:hover ': {
        backgroundColor: 'rgba(0,0,0,0.08)',
        '& $check': {
          display: 'none'
        },
        '& $close': {
          display: 'inline'
        }
      }
    },
    check: {
      color: 'rgba(0,0,0,0.12)'
    },
    close: {
      display: 'none',
      color: 'rgba(0,0,0,0.2)'
    },
    overlay: _objectSpread({}, (0, _.overlay)())
  });
})(MultiSelect));

exports.default = _default;