"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _polished = require("polished");

var _ = require("../.");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ImageUpload = function ImageUpload(_ref) {
  var name = _ref.name,
      value = _ref.value,
      placeholder = _ref.placeholder,
      required = _ref.required,
      setValue = _ref.setValue,
      classes = _ref.classes;
  return !value ? /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react.default.createElement("input", {
    accept: "image/*",
    className: classes.input,
    id: name,
    type: "file",
    onChange: function onChange(e) {
      var fileReader = new FileReader();
      var _e$target$files$ = e.target.files[0],
          fileName = _e$target$files$.name,
          fileType = _e$target$files$.type;
      var dataFile = e.target.files[0];
      fileReader.readAsDataURL(e.target.files[0]);

      fileReader.onload = function () {
        var data = fileReader.result;
        setValue(name, {
          name: fileName,
          type: fileType.split('/')[0],
          data: data,
          dataFile: dataFile
        }, required);
      };
    }
  }), /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: name
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.upload
  }, "+ Upload ", placeholder || 'image'))) : /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: typeof value === 'string' && value.includes('http') ? value : value.data,
    className: classes.image,
    alt: "Uploaded file"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.filename
  }, typeof value === 'string' ? value : value.name || value.data.split('/').pop()), /*#__PURE__*/_react.default.createElement("button", {
    className: classes.delete,
    onClick: function onClick() {
      return setValue(name, '', required);
    }
  }, "Delete ", placeholder || 'image'));
};

ImageUpload.propTypes = {
  name: _propTypes.default.string.isRequired,
  value: _propTypes.default.any,
  placeholder: _propTypes.default.node,
  required: _propTypes.default.bool,
  setValue: _propTypes.default.func.isRequired
};

var _default = (0, _.withFormControl)((0, _reactJss.default)(function (theme) {
  return {
    root: {
      textAlign: 'center',
      padding: 20,
      backgroundColor: theme.colors.fill,
      maxWidth: 300,
      borderRadius: theme.sizes.borderRadius
    },
    input: {
      display: 'none'
    },
    upload: {
      border: "2px dashed ".concat((0, _polished.darken)(0.2, theme.colors.inputBorder)),
      color: (0, _polished.darken)(0.3, theme.colors.inputBorder),
      padding: '30px 20px',
      cursor: 'pointer',
      fontSize: theme.typography.labelFontSize,
      lineHeight: 'normal',
      '&:hover': {
        backgroundColor: (0, _polished.lighten)(0.02, theme.colors.fill)
      }
    },
    delete: {
      backgroundColor: theme.colors.accent,
      color: theme.colors.inputBg !== 'transparent' ? theme.colors.inputBg : 'white',
      fontSize: theme.typography.labelFontSize,
      lineHeight: 'normal',
      padding: '5px 8px',
      border: 'none',
      cursor: 'pointer',
      '&:hover': {
        backgroundColor: (0, _polished.lighten)(0.02, theme.colors.accent)
      }
    },
    image: {
      display: 'block',
      backgroundColor: 'white',
      padding: 5,
      margin: '0 auto 10px',
      maxWidth: '100%',
      boxSizing: 'border-box'
    },
    filename: _objectSpread({
      maxWidth: '100%',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      marginBottom: 10,
      fontSize: 11,
      color: theme.colors.inputText,
      lineHeight: 'normal',
      textAlign: 'center'
    }, (0, _.maxRows)())
  };
})(ImageUpload));

exports.default = _default;