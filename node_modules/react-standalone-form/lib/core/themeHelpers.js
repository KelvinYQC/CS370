"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inputHeight = inputHeight;
exports.breakpoint = breakpoint;
exports.clearfix = clearfix;
exports.overlay = overlay;
exports.maxRows = maxRows;
exports.placeholder = placeholder;

var _theme = _interopRequireDefault(require("./theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function inputHeight(height) {
  return {
    '& *.form-input': {
      height: height,
      lineHeight: "".concat(height - height / 3, "px"),
      paddingTop: height / 6,
      paddingBottom: height / 6,
      '&[type=file]': {
        lineHeight: "".concat(height * 0.45, "px")
      }
    },
    '& textarea.form-input': {
      minHeight: height,
      height: 'auto'
    },
    '& .form-select:not([multiple])': {
      backgroundPosition: "calc(100% - 15px) ".concat(height / 2 - 2, "px, calc(100% - 10px) ").concat(height / 2 - 2, "px")
    },
    '& $addon': {
      height: height,
      lineHeight: "".concat(height, "px")
    },
    '&$inlineLabel > $label': _defineProperty({}, breakpoint(_theme.default.breakpoints.sm), {
      lineHeight: "".concat(height, "px"),
      marginBottom: 0
    }),
    '&$inlineLabel .form-checkitem': {
      marginTop: height / 4
    }
  };
}

function breakpoint(height) {
  return "@media (min-width: ".concat(height, ")");
}

function clearfix() {
  return {
    '&:after': {
      content: '',
      display: 'table',
      clear: 'both'
    }
  };
}

function overlay() {
  return {
    position: 'fixed',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    zIndex: 100
  };
}

function maxRows(amount) {
  return {
    overflow: 'hidden',
    display: '-webkit-box',
    '-webkit-line-clamp': amount,
    '-webkit-box-orient': 'vertical'
  };
}

function placeholder(styles) {
  return {
    '&::-moz-placeholder': _objectSpread({}, styles),
    '&:-ms-input-placeholder': _objectSpread({}, styles),
    '&::-webkit-input-placeholder': _objectSpread({}, styles)
  };
}