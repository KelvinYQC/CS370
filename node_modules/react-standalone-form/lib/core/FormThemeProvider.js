"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactJss = require("react-jss");

var _reactToastify = require("react-toastify");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _theme = _interopRequireDefault(require("./theme"));

require("react-toastify/dist/ReactToastify.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var FormThemeProvider = function FormThemeProvider(_ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      children = _ref.children;

  var _React$useState = _react.default.useState(),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      customizedTheme = _React$useState2[0],
      setCustomizedTheme = _React$useState2[1];

  var _React$useState3 = _react.default.useState({}),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      toastContainerProps = _React$useState4[0],
      setToastContainerProps = _React$useState4[1];

  var outerTheme = (0, _reactJss.useTheme)();
  var isRoot = !outerTheme;

  _react.default.useEffect(function () {
    var parentTheme = outerTheme || _theme.default; // Use build in react-toastify plugin only if errorNotificationFunc is not defined.

    var usesToastifyPlugin = !(parentTheme !== null && parentTheme !== void 0 && parentTheme.errorNotificationFunc) && !theme.errorNotificationFunc;

    var parsedTheme = _objectSpread(_objectSpread({
      sizes: _objectSpread(_objectSpread({}, parentTheme.sizes), theme.sizes),
      colors: _objectSpread(_objectSpread({}, parentTheme.colors), theme.colors),
      typography: _objectSpread(_objectSpread({}, parentTheme.typography), theme.typography),
      breakpoints: _objectSpread(_objectSpread({}, parentTheme.breakpoints), theme.breakpoints),
      textLabels: _objectSpread(_objectSpread({}, parentTheme.textLabels), theme.textLabels),
      errorNotificationFunc: function errorNotificationFunc(message) {
        return usesToastifyPlugin ? _reactToastify.toast.error(message) : parentTheme.errorNotificationFunc ? parentTheme.errorNotificationFunc(message) : theme.errorNotificationFunc(message);
      }
    }, usesToastifyPlugin ? {
      toastContainerProps: _objectSpread(_objectSpread({}, parentTheme.toastContainerProps), theme.toastContainerProps)
    } : {}), {}, {
      customValidationFunction: parentTheme.customValidationFunction || theme.customValidationFunction
    });

    setCustomizedTheme(parsedTheme);

    if (usesToastifyPlugin) {
      setToastContainerProps(parsedTheme.toastContainerProps);
    }
  }, []); // SSR support - customizedTheme is construted via useEffect hook, which is
  // triggered only on a client, after the render. So for the purpose of
  // Server Side Rendering, if customizedTheme is not set yet, use defautTheme.
  // To prevent ugly initial jump between customized/default look of forms
  // that appears on initial view area of a page (for example in a hero section),
  // set page opacity to 0.


  return /*#__PURE__*/_react.default.createElement(_reactJss.ThemeProvider, {
    theme: customizedTheme || _theme.default
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, customizedTheme ? children : /*#__PURE__*/_react.default.createElement("div", {
    style: {
      opacity: 0
    }
  }, children), isRoot && toastContainerProps && /*#__PURE__*/_react.default.createElement(_reactToastify.ToastContainer, toastContainerProps)));
};

FormThemeProvider.propTypes = {
  theme: _propTypes.default.object
};
var _default = FormThemeProvider;
exports.default = _default;