"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FormConsumer = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _throttleDebounce = require("throttle-debounce");

var _reactJss = _interopRequireDefault(require("react-jss"));

var _classnames = _interopRequireDefault(require("classnames"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/* eslint-disable react/jsx-no-bind */

/* eslint-disable react/no-did-update-set-state */
var FieldsContext = /*#__PURE__*/_react.default.createContext({});

var SetValueContext = /*#__PURE__*/_react.default.createContext(function () {});

var FormConsumer = function FormConsumer(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/_react.default.createElement(FieldsContext.Consumer, null, function (fieldsData) {
    return /*#__PURE__*/_react.default.createElement(SetValueContext.Consumer, null, function (setValue) {
      return children({
        fieldsData: fieldsData,
        setValue: setValue
      });
    });
  });
};

exports.FormConsumer = FormConsumer;
FormConsumer.propTypes = {
  children: _propTypes.default.func.isRequired
};
/**
 * This form component's Creates new context with defined fields that are
 * avaliable for all field items inside.
 */

var Form = /*#__PURE__*/function (_React$Component) {
  _inherits(Form, _React$Component);

  var _super = _createSuper(Form);

  function Form(props) {
    var _this;

    _classCallCheck(this, Form);

    _this = _super.call(this, props);
    var requiredFields = props.allRequired ? props.fields : props.required;
    _this.onChangeThrottled = (0, _throttleDebounce.debounce)(500, props.onChange);
    _this.state = {
      fieldsData: (0, _helpers.initiateFormFields)(props.fields, requiredFields)
    };
    return _this;
  }

  _createClass(Form, [{
    key: "setValue",
    value: function setValue(name, value, required, options) {
      var _this2 = this;

      var _this$props = this.props,
          fields = _this$props.fields,
          allRequired = _this$props.allRequired,
          onChange = _this$props.onChange,
          runOnChangeInitially = _this$props.runOnChangeInitially,
          theme = _this$props.theme;

      if (!name) {
        // If no field name is provided, reset whole form
        var requiredFields = allRequired ? fields : required;
        this.setState({
          fieldsData: (0, _helpers.initiateFormFields)(fields, requiredFields)
        });
      } else {
        this.setState(function (prevState) {
          var fieldsData = _objectSpread(_objectSpread({}, prevState.fieldsData), (0, _helpers.processField)(name, value, required, options, theme.textLabels, theme.customValidationFunction));

          if (onChange) {
            // If onChange prop is present, run it on every form change,
            // except the initial load. When runOnChangeInitially prop is present,
            // run it also on Initial load.
            var formIsInitiated = Object.entries(prevState.fieldsData).every(function (item) {
              return typeof item[1].value === 'undefined';
            });

            if (!formIsInitiated || runOnChangeInitially) {
              _this2.onChangeThrottled((0, _helpers.getValues)(fieldsData), name);
            }
          }

          return {
            fieldsData: fieldsData
          };
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.required && this.props.required && prevProps.required.toString() !== this.props.required.toString() && !this.props.allRequired) {
        this.setState({
          fieldsData: (0, _helpers.updateFieldsRequirements)(this.state.fieldsData, this.props.required)
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          classes = _this$props2.classes,
          component = _this$props2.component,
          runOnChangeInitially = _this$props2.runOnChangeInitially; // Prevent puting <form> tag into a <form> tag when using form in mutlivalue inputs.

      var Component = runOnChangeInitially ? 'div' : component;
      return /*#__PURE__*/_react.default.createElement(Component, {
        className: (0, _classnames.default)(classes.form, _defineProperty({}, className, className))
      }, /*#__PURE__*/_react.default.createElement(FieldsContext.Provider, {
        value: this.state.fieldsData
      }, /*#__PURE__*/_react.default.createElement(SetValueContext.Provider, {
        value: this.setValue.bind(this)
      }, this.props.children)));
    }
  }]);

  return Form;
}(_react.default.Component);

Form.propTypes = {
  fields: _propTypes.default.array.isRequired,
  required: _propTypes.default.array,
  allRequired: _propTypes.default.bool,
  component: _propTypes.default.string,
  children: _propTypes.default.node.isRequired,
  onChange: _propTypes.default.func,
  runOnChangeInitially: _propTypes.default.bool
};
Form.defaultProps = {
  component: 'form'
};

var _default = (0, _reactJss.default)(function (theme) {
  return {
    form: {
      margin: 0
    }
  };
}, {
  injectTheme: true
})(Form);

exports.default = _default;